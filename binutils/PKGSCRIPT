# Package Maintainers
MAINTAINERS=("Evie Viau <evie@uwueviee.live>")

# Package information
NAME="binutils"
VERSION="2.38"
EPOCH=1
DESC="A collection of binary tools, including an assembler, linker, and binary utilities."
GRPS=("devel")
URL="https://www.gnu.org/software/binutils/"
LICENSES=("GPL")
DEPENDS=("zlib" "elfutils")
OPT_DEPENDS=()
MK_DEPENDS=("dejagnu" "texinfo")
PROVIDES=("binutils")
CONFLICTS=()
REPLACES=()

# Source information
SRC=("https://ftp.gnu.org/gnu/binutils/binutils-${VERSION}.tar.xz"
"https://www.linuxfromscratch.org/patches/lfs/development/binutils-2.38-lto_fix-1.patch")

SUM_TYPE="sha512"
SUM=("8bf0b0d193c9c010e0518ee2b2e5a830898af206510992483b427477ed178396cd210235e85fd7bd99a96fc6d5eedbeccbd48317a10f752b7336ada8b2bb826d"
"71ffe517119e217ef0ec827d74a289f901b4c8a5ca220942204e0733176289adc44412c1f85b31eb5103b8881c74518137bf3686d5e48c42a5368f9255385d31")

# Prepare script
function prepare() {
    cd "${WORKDIR}/${NAME}-${VERSION}"

    # Ensure we have PTYs for building
    echo "We will now check if we have PTYs for building."

    expect -c "spawn ls"

    echo "If the output is 'spawn ls', we have PTYs for building."
    echo "Any other output means the environment is not set up correctly. Please check your environment."

    # Silently check and exit if incorrect
    $(expect -c "spawn ls" | grep -q "spawn ls") || exit

    # Apply a patch from upstream to fix an issue with building some packages
    patch -Np1 -i "${WORKDIR}/binutils-2.38-lto_fix-1.patch"

    # Fix issue identified upstream when building some packages
    sed -e '/R_386_TLS_LE /i \   || (TYPE) == R_386_TLS_IE \\' \
        -i ./bfd/elfxx-x86.h

    # Ensure the man pages will be regenerated correctly
    sed -i '63d' etc/texi2pod.pl
    find -name \*.1 -delete

    mkdir -v build
    cd       build

    ../configure --prefix=/usr                                      \
                 --with-bugurl=https://yiffos.atlassian.net/jira/   \
                 --enable-cet                                       \
                 --enable-deterministic-archives                    \
                 --enable-gold                                      \
                 --enable-ld=default                                \
                 --enable-plugins                                   \
                 --enable-shared                                    \
                 --enable-threads                                   \
                 --enable-lto                                       \
                 --disable-werror                                   \
                 --enable-64-bit-bfd                                \
                 --enable-install-libiberty                         \
                 --with-system-zlib                                 \
                 --enable-multilib

    return 0
}

# Build script
function build() {
    cd "${WORKDIR}/${NAME}-${VERSION}/build"

    make tooldir=/usr

    # DO NOT SKIP THE CHECK FOR BINUTILS though some failures are exptected
    make -k check || true

    return 0
}

# Post build script
function postbuild() {
    cd "${WORKDIR}/${NAME}-${VERSION}/build"

    DESTDIR="${BUILD_DATA_ROOT}" make tooldir=/usr install -j1

    rm -fv ${BUILD_DATA_ROOT}/usr/lib/lib{bfd,ctf,ctf-nobfd,opcodes}.a

    install -m644 libiberty/pic/libiberty.a "${BUILD_DATA_ROOT}/usr/lib"

    return 0
}