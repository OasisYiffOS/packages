# Package Maintainers
MAINTAINERS=("Evie Viau <evie@eviee.gay>")

# Package information
NAME="llvm"
VERSION="18.1.8"
EPOCH=0
DESC="A collection of modular and reusable compiler and toolchain technologies."
GRPS=()
URL="https://llvm.org"
LICENSES=("Apache-2.0")
DEPENDS=("glibc" "libgcc" "ncurses" "libffi" "zlib")
OPT_DEPENDS=()
MK_DEPENDS=("cmake" "libxml2" "rsync" "ninja")
PROVIDES=("llvm")
CONFLICTS=()
REPLACES=()

# Source information
SRC=("https://github.com/llvm/llvm-project/releases/download/llvmorg-${VERSION}/llvm-${VERSION}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${VERSION}/clang-${VERSION}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${VERSION}/compiler-rt-${VERSION}.src.tar.xz"
"https://github.com/llvm/llvm-project/releases/download/llvmorg-${VERSION}/cmake-${VERSION}.src.tar.xz")

#SUM_TYPE="sha512"
#SUM=("7783d6212b09ce7498ec873ca17cfdc7b08879cbf9693deeafad008a0c5d8af1f99134a3ca596f32ac0d20ab4a29c9e779d6ab2b01ce722e0aac7adb16b271d2"
#"5997e4e4ae6a4c587330cb436e4f9ee72402096e351fe804dac2bc31982c9fdeadd9e4c5a0848f9962d5ea378e5af137c9e1043c9c79420cf8ca067b0dfcb236"
#"5440b4f48a87ce5fdab77609f851b732a8310bc3859af4e441c0b35c86472d4db2127ceaffdbb5f34ca45ff96244a749d74ee488cbcfbd7a12cad519ec31fc69"
#"a1ab4a7f17d24add587e4dec416686fb03a83aff7285ced8db4eb249d4e10f2f952762d45330cbdf6132f7056c4bbd2d2f6a89fe67ab483c2aa73535799b5e1a")

# Prepare script
function prepare() {
    cd "${WORKDIR}/${NAME}-${VERSION}.src"

    # Move cland and the compiler runtime into the correct llvm directory
    mkdir -p tools/clang projects/compiler-rt ${WORKDIR}/cmake

    mv ${WORKDIR}/clang-${VERSION}.src/* tools/clang/
    mv ${WORKDIR}/compiler-rt-${VERSION}.src/ projects/compiler-rt/
    mv ${WORKDIR}/cmake-${VERSION}.src/*  ${WORKDIR}/cmake/

    rmdir ${WORKDIR}/clang-${VERSION}.src ${WORKDIR}/compiler-rt-${VERSION}.src ${WORKDIR}/cmake-${VERSION}.src

    # Force python3 to be used
    grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'

    mkdir -v build
    cd       build

    CC=gcc CXX=g++                                \
    cmake -DCMAKE_INSTALL_PREFIX=/usr             \
        -DLLVM_ENABLE_FFI=ON                      \
        -DCMAKE_BUILD_TYPE=Release                \
        -DLLVM_BUILD_LLVM_DYLIB=ON                \
        -DLLVM_LINK_LLVM_DYLIB=ON                 \
        -DLLVM_ENABLE_RTTI=ON                     \
        -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
        -DLLVM_BINUTILS_INCDIR=/usr/include       \
        -DLLVM_INCLUDE_BENCHMARKS=OFF             \
        -DLLVM_INCLUDE_TESTS=OFF                  \
        -DCOMPILER_RT_INCLUDE_TESTS=OFF           \
        -Wno-dev -G Ninja .. 

    return 0
}

# Build script
function build() {
    cd "${WORKDIR}/${NAME}-${VERSION}.src/build"

    ninja

    # 2 tests fail, so we need to disable them
    #ninja check-all

    return 0
}

# Post build script
function postbuild() {
    cd "${WORKDIR}/${NAME}-${VERSION}.src/build"

    DESTDIR="${BUILD_DATA_ROOT}" ninja install

    return 0
}
